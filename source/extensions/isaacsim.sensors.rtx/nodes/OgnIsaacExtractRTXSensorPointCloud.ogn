{
    "IsaacExtractRTXSensorPointCloud": {
        "version": 1,
        "description": "Extracts point cloud data from an RTX sensor's output buffer as Cartesian coordinates",
        "language": "C++",
        "metadata": {
            "categories": ["Sensor"],
            "keywords": ["rtx", "lidar", "sensor"],
            "tooltip": "Extracts point cloud data from an RTX sensor's output buffer as Cartesian coordinates.",
            "display_name": "Extract RTX Sensor Point Cloud"
        },
        "categoryDefinitions": "config/CategoryDefinition.json",
        "categories": "isaacRtxSensor",
        "state": {"$comment": ["Internal state"]},
        "inputs": {
            "exec": {
                "type": "execution",
                "description": "The input execution port"
            },
            "dataPtr": {
                "type": "uint64",
                "description": "Pointer to the GenericModelOutput data.",
                "default": 0
            },
            "cudaStream": {
                "description" : "Cuda Stream Input",
                "type" : "uint64",
                "default" : 0
            },
            "accumulateLidarScan": {
                "type": "bool",
                "description": "Lidar only. Set to true if dataPtr input is expected to be accumulated Lidar scan.",
                "default": false
            },
            "newData": {
                "type": "bool",
                "description": "Lidar only. Set to true if dataPtr input is accumulated Lidar scan; only tested if accumulateLidarScan is true.",
                "default": false
            }
        },
        "outputs": {
            "exec": {
                "type": "execution",
                "description": "Output execution triggers when lidar sensor has data"
            },
            "transform": {
                "type": "matrixd[4]",
                "description": "The transform matrix from lidar to world coordinates",
                "default": [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]
            },
            "dataPtr": {
                "type": "uint64",
                "description": "Buffer containing point cloud data",
                "uiName": "Point Cloud Data",
                "default": 0
            },
            "cudaDeviceIndex": {
                "type": "int",
                "description": "Index of the device where the data lives (-1 for host data)",
                "default": -1
            },
            "cudaStream": {
                "description" : "Cuda Stream Input",
                "type" : "uint64",
                "default" : 0
            },
            "bufferSize": {
                "type": "uint64",
                "description": "Size (in bytes) of the point cloud buffer (0 if the input is a texture)",
                "default": 0
            },
            "height":{
                "type": "uint",
                "description": "Height of point cloud buffer, will always return 1",
                "default": 1
            },
            "width":{
                "type": "uint",
                "description": "3 x Width or number of points in point cloud buffer",
                "default": 0
            },
            "accumulatedData": {
                "type": "bool",
                "description": "If accumulateLidarScan is true, this will be true if the point cloud data is new (i.e. not a repeat of the previous frame)",
                "default": false
            }
        }
    }
}
